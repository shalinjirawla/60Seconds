// <auto-generated />
using System;
using Dlvr.SixtySeconds.Models.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dlvr.SixtySeconds.Models.Migrations
{
    [DbContext(typeof(SixtySecondsDbContext))]
    [Migration("20200603063509_TableTaskAssignmentCommentTagsAdded")]
    partial class TableTaskAssignmentCommentTagsAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.AudioRehearsal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("TaskAssignmentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("TaskAssignmentId");

                    b.ToTable("AudioRehearsals");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.BusinessUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScriptFields")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Terms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("StateId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("BusinessUnits");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BrandName = "Sixty Seconds",
                            CountryId = 1,
                            CreatedOn = new DateTime(2020, 6, 3, 6, 35, 6, 953, DateTimeKind.Utc).AddTicks(9191),
                            Email = "james@thedlvr.co",
                            Name = "Sixty Seconds",
                            ScriptFields = "[{\"Id\":1,\"Index\":1,\"Title\":\"Open Call\",\"Description\":\"Open Call\"},{\"Id\":2,\"Index\":2,\"Title\":\"Features and Benifits\",\"Description\":\"Features and Benifits\"},{\"Id\":3,\"Index\":3,\"Title\":\"Handle Objection\",\"Description\":\"Handle Objection\"},{\"Id\":4,\"Index\":4,\"Title\":\"Close\",\"Description\":\"Close\"}]",
                            StateId = 1,
                            Terms = ""
                        });
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.BusinessUnitKeyword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BusinessUnitId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitId");

                    b.ToTable("BusinessUnitKeywords");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.BusinessUnitUser", b =>
                {
                    b.Property<long>("BusinessUnitId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("BusinessUnitId", "UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("BusinessUnitUsers");

                    b.HasData(
                        new
                        {
                            BusinessUnitId = 1L,
                            UserId = 1L,
                            RoleId = 1
                        },
                        new
                        {
                            BusinessUnitId = 1L,
                            UserId = 2L,
                            RoleId = 2
                        },
                        new
                        {
                            BusinessUnitId = 1L,
                            UserId = 3L,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Austrilia"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 3,
                            Name = "India"
                        });
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.NotificationUser", b =>
                {
                    b.Property<long>("BusinessUnitId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("NotificationId")
                        .HasColumnType("bigint");

                    b.HasKey("BusinessUnitId", "UserId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Auth0RoleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Auth0RoleId = "rol_OgEP5bCa89sY17JG",
                            CreatedOn = new DateTime(2020, 6, 3, 6, 35, 6, 952, DateTimeKind.Utc).AddTicks(3321),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Auth0RoleId = "rol_LLTgQ3r0mHMyeH8b",
                            CreatedOn = new DateTime(2020, 6, 3, 6, 35, 6, 952, DateTimeKind.Utc).AddTicks(4297),
                            Name = "Coach"
                        },
                        new
                        {
                            Id = 3,
                            Auth0RoleId = "rol_v0AmlMLlkkbk5BI0",
                            CreatedOn = new DateTime(2020, 6, 3, 6, 35, 6, 952, DateTimeKind.Utc).AddTicks(4341),
                            Name = "SalesPerson"
                        });
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.Scenario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Audience")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Situation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("TaskId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Scenarios");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.ScenarioKeyword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("KeywordId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScenarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("KeywordId");

                    b.HasIndex("ScenarioId");

                    b.ToTable("ScenarioKeywords");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.Script", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("ScenarioId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ScenarioId")
                        .IsUnique();

                    b.HasIndex("TaskId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Scripts");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.ScriptContent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ScriptFieldId")
                        .HasColumnType("int");

                    b.Property<string>("ScriptFieldvalue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ScriptId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ScriptId");

                    b.ToTable("ScriptContents");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Victoria"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 2,
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 3,
                            Name = "Gujarat"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            Name = "New South Wales"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            Name = "Western Australia"
                        });
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BusinessUnitId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.TaskAssignment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AssignedTo")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FeaturedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<long>("ScenarioId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScriptId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ScenarioId");

                    b.HasIndex("ScriptId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("TaskAssignments");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.TaskAssignmentAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("TaskAssignmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TaskAssignmentId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskAssignmentActions");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.TaskAssignmentComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TaskAssignmentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("TaskAssignmentId");

                    b.ToTable("TaskAssignmentComments");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.TaskAssignmentCommentTags", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BusinessUnitId")
                        .HasColumnType("bigint");

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskAssignmentCommentTags");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.TaskAssignmentFeedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AudioRehearsalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ScenarioId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ScriptId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaskAssignmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VideoRehearsalId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AudioRehearsalId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ScenarioId");

                    b.HasIndex("ScriptId");

                    b.HasIndex("TaskAssignmentId");

                    b.HasIndex("VideoRehearsalId");

                    b.ToTable("TaskAssignmentFeedbacks");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.TaskAssignmentLike", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("bit");

                    b.Property<long>("TaskAssignmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("TaskAssignmentId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("TaskAssignmentLikes");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.TaskAssignmentShare", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("TaskAssignmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("ToUser")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("TaskAssignmentId");

                    b.HasIndex("ToUser");

                    b.ToTable("TaskAssignmentShares");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Auth0Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ReportTo")
                        .HasColumnType("bigint");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("ReportTo");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Auth0Id = "",
                            CreatedOn = new DateTime(2020, 6, 3, 6, 35, 6, 955, DateTimeKind.Utc).AddTicks(930),
                            Email = "james@thedlvr.co",
                            FirstName = "Admin",
                            LastName = "",
                            Phone = ""
                        },
                        new
                        {
                            Id = 2L,
                            Auth0Id = "auth0|5eac66d09721430be8d148bc",
                            CreatedOn = new DateTime(2020, 6, 3, 6, 35, 6, 955, DateTimeKind.Utc).AddTicks(2333),
                            Email = "coach@thedlvr.co",
                            FirstName = "Sales",
                            LastName = "Manager",
                            Phone = "1234567",
                            ReportTo = 1L
                        },
                        new
                        {
                            Id = 3L,
                            Auth0Id = "auth0|5e9a8226e6e7eb0bdfb35ddd",
                            CreatedOn = new DateTime(2020, 6, 3, 6, 35, 6, 955, DateTimeKind.Utc).AddTicks(2385),
                            Email = "pavan@thedlvr.co.in",
                            FirstName = "Pavan",
                            LastName = "Welihinda",
                            Phone = "1213456",
                            ReportTo = 2L
                        });
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.UserDeviceToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceType")
                        .HasColumnType("int");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserSessionId");

                    b.ToTable("UserDeviceTokens");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("BusinessUnitId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LogOffDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.UserTokenDetail", b =>
                {
                    b.Property<Guid>("TokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpireOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssueOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TokenId", "SessionId");

                    b.HasIndex("SessionId");

                    b.ToTable("UserTokenDetails");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.VideoRehearsal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("TaskAssignmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("TaskAssignmentId");

                    b.ToTable("VideoRehearsals");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.AudioRehearsal", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.TaskAssignment", "TaskAssignment")
                        .WithMany("AudioRehearsals")
                        .HasForeignKey("TaskAssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.BusinessUnit", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.BusinessUnitKeyword", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.BusinessUnit", "BusinessUnit")
                        .WithMany()
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.BusinessUnitUser", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.BusinessUnit", "BusinessUnit")
                        .WithMany("Users")
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.Notification", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.NotificationUser", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.BusinessUnit", "BusinessUnit")
                        .WithMany("Notifications")
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.Notification", "Notification")
                        .WithMany("Users")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.Role", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.Scenario", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.ScenarioKeyword", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.BusinessUnitKeyword", "BusinessUnitKeyword")
                        .WithMany()
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.Scenario", "Scenario")
                        .WithMany()
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.Script", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.Scenario", "Scenario")
                        .WithOne()
                        .HasForeignKey("Dlvr.SixtySeconds.Models.Script", "ScenarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.ScriptContent", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.Script", "Script")
                        .WithMany("ScriptContents")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.State", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.Task", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.BusinessUnit", "BusinessUnit")
                        .WithMany()
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.TaskAssignment", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("AssignedTo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.Scenario", "Scenario")
                        .WithMany()
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.Script", "Script")
                        .WithMany()
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.Task", "Task")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.TaskAssignmentAction", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.TaskAssignment", "TaskAssignment")
                        .WithMany("TaskAssignmentActions")
                        .HasForeignKey("TaskAssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.TaskAssignmentComment", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.TaskAssignment", "TaskAssignment")
                        .WithMany("TaskAssignmentComments")
                        .HasForeignKey("TaskAssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.TaskAssignmentCommentTags", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.BusinessUnit", "BusinessUnit")
                        .WithMany()
                        .HasForeignKey("BusinessUnitId");

                    b.HasOne("Dlvr.SixtySeconds.Models.TaskAssignmentComment", "Comment")
                        .WithMany("Tags")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.TaskAssignmentFeedback", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.AudioRehearsal", "AudioRehearsal")
                        .WithMany()
                        .HasForeignKey("AudioRehearsalId");

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.Scenario", "Scenario")
                        .WithMany()
                        .HasForeignKey("ScenarioId");

                    b.HasOne("Dlvr.SixtySeconds.Models.Script", "Script")
                        .WithMany()
                        .HasForeignKey("ScriptId");

                    b.HasOne("Dlvr.SixtySeconds.Models.TaskAssignment", "TaskAssignment")
                        .WithMany("TaskAssignmentFeedbacks")
                        .HasForeignKey("TaskAssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.VideoRehearsal", "VideoRehearsal")
                        .WithMany()
                        .HasForeignKey("VideoRehearsalId");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.TaskAssignmentLike", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.TaskAssignment", "TaskAssignment")
                        .WithMany("TaskAssignmentLikes")
                        .HasForeignKey("TaskAssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.TaskAssignmentShare", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.TaskAssignment", "TaskAssignment")
                        .WithMany("TaskAssignmentShares")
                        .HasForeignKey("TaskAssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("ToUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.User", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "ReportToUser")
                        .WithMany()
                        .HasForeignKey("ReportTo")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.UserDeviceToken", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.UserSession", "UserSession")
                        .WithMany()
                        .HasForeignKey("UserSessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.UserSession", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.BusinessUnit", "BusinessUnit")
                        .WithMany()
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.UserTokenDetail", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.UserSession", "UserSession")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Dlvr.SixtySeconds.Models.VideoRehearsal", b =>
                {
                    b.HasOne("Dlvr.SixtySeconds.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy");

                    b.HasOne("Dlvr.SixtySeconds.Models.TaskAssignment", "TaskAssignment")
                        .WithMany("VideoRehearsals")
                        .HasForeignKey("TaskAssignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
